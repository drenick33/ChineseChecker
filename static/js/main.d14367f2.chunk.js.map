{"version":3,"sources":["components/layout/NavDrawer.tsx","components/layout/Navbar.tsx","components/pages/main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Option","Select","NavDrawer","props","useState","visible","setVisible","useThemeSwitcher","switcher","currentTheme","status","SettingOutlined","onClick","title","placement","closable","onClose","className","placeholder","size","onSelect","value","theme","newTheme","localStorage","setItem","Navbar","mode","Item","key","style","float","Main","useSpeechRecognition","transcript","resetTranscript","SpeechRecognition","browserSupportsSpeechRecognition","console","log","paddingTop","fontSize","startListening","language","stopListening","Header","Layout","App","exact","path","component","Boolean","window","location","hostname","match","themes","default","process","dark","light","dracula","monokai","nord","breeze","curTheme","getItem","matchMedia","matches","document","ReactDOM","render","StrictMode","themeMap","defaultTheme","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d14367f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Drawer, Select } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\nimport { useThemeSwitcher } from 'react-css-theme-switcher';\n\nconst { Option } = Select;\n\nconst NavDrawer = (props: any) => {\n  const [visible, setVisible] = useState(false);\n  const { switcher, currentTheme, status } = useThemeSwitcher();\n\n  const showDrawer = () => {\n    setVisible(true);\n  }; //Open\n  const onClose = () => {\n    setVisible(false);\n  }; //Close\n\n  if (status === 'loading') {\n    return <div>Loading styles...</div>;\n  } //Prevent errors if styles don't load\n\n  const selectTheme = (newTheme: string) => {\n    switcher({ theme: newTheme });\n    localStorage.setItem('curTheme', newTheme);\n  }; //Select Theme\n\n  return (\n    <div>\n      <SettingOutlined onClick={showDrawer} />\n      <Drawer\n        title='Settings'\n        placement='right'\n        closable={false}\n        onClose={onClose}\n        visible={visible}\n      >\n        <h4 className='center'>Theme: {currentTheme}</h4>\n\n        <Select\n          placeholder='Change Theme'\n          size='large'\n          onSelect={(value: any) => selectTheme(value)}\n        >\n          <Option value='default'>Default</Option>\n          <Option value='dark'>Dark</Option>\n          <Option value='light'>Light</Option>\n          <Option value='dracula'>Dracula</Option>\n          <Option value='monokai'>Monokai</Option>\n          <Option value='nord'>Nord</Option>\n          <Option value='breeze'>Breeze</Option>\n        </Select>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default NavDrawer;\n","import React from 'react';\nimport { Menu } from 'antd';\nimport NavDrawer from './NavDrawer';\n\nconst Navbar = () => {\n  return (\n    <Menu theme='light' mode='horizontal'>\n      <Menu.Item key='2' style={{ float: 'right' }}>\n        <NavDrawer></NavDrawer>\n      </Menu.Item>\n      <Menu.Item key='1'>\n        <h3>Chinese Checker</h3>\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from 'react-speech-recognition';\nimport { Button } from 'antd';\n\nconst Main = (props: any) => {\n  const { transcript, resetTranscript } = useSpeechRecognition();\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    console.log('failed');\n    return null;\n  }\n\n  const listen = () => {\n    console.log('recording');\n    SpeechRecognition.startListening({ language: 'zh-CN' });\n  };\n\n  return (\n    <div className='mainContainer container-fluid'>\n      <div className='col' style={{ paddingTop: '250px' }}>\n        <div className='row d-flex justify-content-center'>\n          {transcript === '' ? (\n            <p style={{ fontSize: '24px' }}>Please Speak</p>\n          ) : (\n            <p style={{ fontSize: '24px' }}>{transcript}</p>\n          )}\n        </div>\n        <div className='row d-flex justify-content-center'>\n          <Button onClick={listen}>Start</Button>\n          <Button onClick={() => SpeechRecognition.stopListening}>Stop</Button>\n          <Button onClick={() => resetTranscript}>Reset</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.less';\nimport Navbar from './components/layout/Navbar';\nimport Main from './components/pages/main/Main';\n\nimport { Layout } from 'antd';\nconst { Header } = Layout;\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Header>\n          <Navbar></Navbar>\n        </Header>\n        <Switch>\n          <Route exact path='/' component={Main} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n// const mapDispatchToProps = (dispatch: any) => ({\n//   loadUser: () => dispatch({ type: 'USER_LOADING' }),\n// });\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { ThemeSwitcherProvider } from 'react-css-theme-switcher';\n\nconst themes = {\n  default: `${process.env.PUBLIC_URL}/breezePurple-theme.css`,\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n  dracula: `${process.env.PUBLIC_URL}/dracula-theme.css`,\n  monokai: `${process.env.PUBLIC_URL}/monokai-theme.css`,\n  nord: `${process.env.PUBLIC_URL}/nord-theme.css`,\n  breeze: `${process.env.PUBLIC_URL}/breeze-theme.css`,\n}; //themes\n\nlet curTheme = localStorage.getItem('curTheme') || ''; //Get last theme user had\nif (curTheme === '') {\n  if (\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  ) {\n    //If user prefers dark mode\n    curTheme = 'dracula';\n  }\n  curTheme = 'default';\n  localStorage.setItem('curTheme', curTheme); //Sets default light theme\n} //Set default theme\n\ndocument.title = '中文 Check';\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={curTheme}>\n      <App />\n    </ThemeSwitcherProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}